library(readr)
library(VennDiagram)
##########0.加载R包####
library(pbapply)
library(rlang)
library(tidyverse)
library(reshape2)
library(openxlsx)
library(DALEX)
library(readr)
library(gbm)
library(dplyr)
library(caret)
library(ggplot2)
library(pROC)
library(rms)
library(rmda)
library(dcurves)
library(Hmisc)
library(ResourceSelection)
library(DynNom)
library(survey)
library(foreign)
library(plotROC)
library(survival)
library(shapper)
library(iml)
library(e1071)
library(ROCR)
library(corrplot)
library(lattice)
library(Formula)
library(SparseM)
library(survival)
library(riskRegression)
library(pheatmap)
library(fastshap)
library(ingredients)
library(mlr3)
library(table1)
library(tableone)
library(adabag)
library(RColorBrewer)
library(VIM)
library(mice)
library(autoReg)
library(cvms)
library(tibble)
library(data.table)
library(ComplexHeatmap)
library(circlize)
library(ROSE)
library(DMwR)
library(scales)
library(kernelshap)
library(shapviz)
library(caret)
library(rpart)
library(rpart.plot)
library(randomForest)
library(xgboost)
library(lightgbm)
library(kknn)
library(neuralnet)
library(NeuralNetTools)
library(gridExtra)
library(partykit)
library(missForest)
library(MLmetrics)
library(readxl)
library(readr)
library(VennDiagram)
##参数调整
# 设置邻居数量的范围
k_values <- seq(1, 30, by = 1)
auc_results <- numeric(length(k_values))
# 循环遍历不同的 K 值
for (i in seq_along(k_values)) {
k <- k_values[i]
model <- kknn(Result ~ ., train = traindata_scaled, test = testdata_scaled, k = k,  kernel = "triangular")
pred_probs <- fitted(model)
# 创建 ROC 曲线对象并计算 AUC
roc_curve <- roc(testdata_scaled$Result, as.numeric(pred_probs))
auc_results[i] <- roc_curve$auc
}
# 可视化 K 值与 AUC 之间的关系
plot(k_values, auc_results, type = "b",
xlab = "Number of Neighbors (k)",
ylab = "AUC",
main = "K vs AUC")
best_k_auc <- k_values[which.max(auc_results)]
print(paste("Best k value based on AUC:", best_k_auc))
# 基于训练集的knn模型
knn_model_train <- kknn(Result ~ ., train = traindata_scaled, test = traindata_scaled, k = best_k_auc, kernel = "triangular")
train_predictions <- fitted(knn_model_train)
# 预测结果
train_pred_knn <- predict(knn_model_train, newdata = traindata_scaled) # 训练集
train_prob_knn <- predict(knn_model_train, newdata = traindata_scaled, type = "prob")[,"Yes"] # 预测属于Yes的概率
#测试集的knn模型
knn_model_test <- kknn(Result ~ ., train = traindata_scaled, test = testdata_scaled, k = best_k_auc, kernel = "triangular")
test_predictions <- fitted(knn_model_test)
# 预测结果
test_pred_knn <- predict(knn_model_test, newdata = testdata_scaled) # 测试集
test_prob_knn <- predict(knn_model_test, newdata = testdata_scaled, type = "prob")[,"Yes"] # 预测属于Yes的概率
#测试集的knn模型
knn_model_test <- kknn(Result ~ ., train = traindata_scaled, test = test2data_scaled, k = best_k_auc, kernel = "triangular")
test2_predictions <- fitted(knn_model_test)
# 预测结果
test2_pred_knn <- predict(knn_model_test, newdata = test2data_scaled) # 测试集
test2_prob_knn <- predict(knn_model_test, newdata = test2data_scaled, type = "prob")[,"Yes"] # 预测属于Yes的概率
# 创建混淆矩阵
confusion_matrix_knn <- caret::confusionMatrix(train_pred_knn,
traindata_scaled$Result,
positive = "Yes") #训练集
print(confusion_matrix_knn)
confusion_matrix_knn1 <- caret::confusionMatrix(test_pred_knn,
testdata_scaled$Result,
positive = "Yes")  #测试集
print(confusion_matrix_knn1)
confusion_matrix_knn2 <- caret::confusionMatrix(test2_pred_knn,
test2data_scaled$Result,
positive = "Yes")  #测试集
print(confusion_matrix_knn2)
################8.1.3 决策树模型########################################
# 构建基础CART模型
tree_model1 <- rpart(Result ~ ., data = traindata_scaled,
method = "class")
View(testdata_scaled)
# 如果需要保存训练集均值与标准差，用于对新数据进行相同的标准化
# 这里举例说明。假设 traindata 是原始训练数据（未标准化）
# 请根据自己实际情况替换
means <- apply(traindata[, -1], 2, mean)
sds   <- apply(traindata[, -1], 2, sd)
#save(knn_model_train, file = "knn_model_train.rda")
# 如果有 means, sds:
getwd()
setwd("~/Desktop/r包")
#save(knn_model_train, file = "knn_model_train.rda")
# 如果有 means, sds:
getwd()
save(knn_model_train, means, sds, file = "knn_model_train.rda")
library(devtools)
create("MyKNNPackage")
#save(knn_model_train, file = "knn_model_train.rda")
# 如果有 means, sds:
getwd()
setwd("~/Desktop/r包/MyKNNPackage")
# 生成文档和 NAMESPACE
devtools::document()
# 本地安装
devtools::install()
library(MyKNNPackage)
# 构造一个测试样本（示例）
test_sample <- data.frame(
ABCB5 = 0.1,
AC093642.5 = 0.2,
AF146191.4 = 0.3,
ANO3 = 0.4,
CTD.2231H16.1 = 0.5,
PRKG1 = 0.6,
RASA3 = 0.7,
VIPR2 = 0.8
)
res <- predict_knn_result(test_sample)
res$pred_prob
res$pred_class
print(res$shap_plot)  # 瀑布图
save(knn_model_train, means, sds, best_k_auc, file = "knn_model_train.rda")
#save(knn_model_train, file = "knn_model_train.rda")
# 如果有 means, sds:
getwd()
# 生成文档和 NAMESPACE
devtools::document()
# 本地安装
devtools::install()
library(MyKNNPackage)
# 构造一个测试样本（示例）
test_sample <- data.frame(
ABCB5 = 0.1,
AC093642.5 = 0.2,
AF146191.4 = 0.3,
ANO3 = 0.4,
CTD.2231H16.1 = 0.5,
PRKG1 = 0.6,
RASA3 = 0.7,
VIPR2 = 0.8
)
res <- predict_knn_result(test_sample)
# 生成文档和 NAMESPACE
devtools::document()
library(MyKNNPackage)
remove.packages("MyKNNPackage", lib="~/Library/R/library")
# 生成文档和 NAMESPACE
devtools::document()
# 本地安装
devtools::install()
library(MyKNNPackage)
# 构造一个测试样本（示例）
test_sample <- data.frame(
ABCB5 = 0.1,
AC093642.5 = 0.2,
AF146191.4 = 0.3,
ANO3 = 0.4,
CTD.2231H16.1 = 0.5,
PRKG1 = 0.6,
RASA3 = 0.7,
VIPR2 = 0.8
)
res <- predict_knn_result(test_sample)
load("~/Desktop/r包/MyKNNPackage/data/knn_model_train.rda")
load("~/Desktop/final_fig_table/20241223_M_SSB_MODEL/model.Rdata")
#save(knn_model_train, file = "knn_model_train.rda")
# 如果有 means, sds:
getwd()
# 首先设定当前工作目录是你的包根目录，比如 setwd(".../MyKNNPackage")
# 然后：
usethis::use_data(traindata_scaled, best_k_auc, means, sds,
internal = FALSE, overwrite = TRUE)
# 生成文档和 NAMESPACE
devtools::document()
# 本地安装
devtools::install()
library(MyKNNPackage)
# 构造一个测试样本（示例）
test_sample <- data.frame(
ABCB5 = 0.1,
AC093642.5 = 0.2,
AF146191.4 = 0.3,
ANO3 = 0.4,
CTD.2231H16.1 = 0.5,
PRKG1 = 0.6,
RASA3 = 0.7,
VIPR2 = 0.8
)
res <- predict_knn_result(test_sample)
# 生成文档和 NAMESPACE
devtools::document()
# 本地安装
devtools::install()
library(MyKNNPackage)
# 构造一个测试样本（示例）
test_sample <- data.frame(
ABCB5 = 0.1,
AC093642.5 = 0.2,
AF146191.4 = 0.3,
ANO3 = 0.4,
CTD.2231H16.1 = 0.5,
PRKG1 = 0.6,
RASA3 = 0.7,
VIPR2 = 0.8
)
res <- predict_knn_result(test_sample)
res$pred_prob
res$pred_class
# 构造一个测试样本（示例）
test_sample <- data.frame(
ABCB5 = 0.9,
AC093642.5 = 0.2,
AF146191.4 = 0.3,
ANO3 = 0.4,
CTD.2231H16.1 = 0.5,
PRKG1 = 0.6,
RASA3 = 40,
VIPR2 = 40
)
res <- predict_knn_result(test_sample)
res$pred_prob
res$pred_class
# 构造一个测试样本（示例）
test_sample <- data.frame(
ABCB5 = 0.9,
AC093642.5 = 0.2,
AF146191.4 = 0.3,
ANO3 = 0.4,
CTD.2231H16.1 = 0.5,
PRKG1 = 0.6,
RASA3 = 0.1,
VIPR2 = 1
)
res <- predict_knn_result(test_sample)
res$pred_prob
res$pred_class
colnames(test2data)
library(MyKNNPackage)
# 构造一个测试样本（示例）
test_sample <- data.frame(
ABCB5 = 0.9,
AC093642.5 = 0.2,
AF146191.4 = 0.3,
ANO3 = 0.4,
CTD.2231H16.1 = 0.5,
PRKG1 = 0.6,
RASA3 = 0.1,
VIPR2 = 1
)
res <- predict_knn_result(test_sample)
res$pred_prob
res$pred_class
# 构造一个测试样本（示例）
test_sample <- data.frame(
ABCB5 = 0.9,
AC093642.5 = 0.2,
AF146191.4 = 0.3,
ANO3 = 0.4,
CTD.2231H16.1 = 0.5,
PRKG1 = 50,
RASA3 = 0.1,
VIPR2 = 1
)
res <- predict_knn_result(test_sample)
res$pred_prob
res$pred_class
# 构造一个测试样本（示例）
test_sample <- data.frame(
ABCB5 = 0.9,
AC093642.5 = 0.2,
AF146191.4 = 0.3,
ANO3 = 0.4,
CTD.2231H16.1 = 0.5,
PRKG1 = 50,
RASA3 = 0.1,
VIPR2 = 45
)
res <- predict_knn_result(test_sample)
res$pred_prob
res$pred_class
setwd("~/Desktop/r包/MyKNNPackage")
# 生成文档和 NAMESPACE
devtools::document()
# 本地安装
devtools::install()
library(MyKNNPackage)
# 构造一个测试样本（示例）
test_sample <- data.frame(
ABCB5 = 0.9,
AC093642.5 = 0.2,
AF146191.4 = 0.3,
ANO3 = 0.4,
CTD.2231H16.1 = 0.5,
PRKG1 = 50,
RASA3 = 0.1,
VIPR2 = 45
)
res <- predict_knn_result(test_sample)
res$pred_prob
res$pred_class
# 生成文档和 NAMESPACE
devtools::document()
# 本地安装
devtools::install()
library(MyKNNPackage)
library(MyKNNPackage)
# 构造一个测试样本（示例）
test_sample <- data.frame(
ABCB5 = 0.9,
AC093642.5 = 0.2,
AF146191.4 = 0.3,
ANO3 = 0.4,
CTD.2231H16.1 = 0.5,
PRKG1 = 50,
RASA3 = 0.1,
VIPR2 = 45
)
res <- predict_result(test_sample)
res$pred_prob
res$pred_class
print(predict_result(test_sample))
print(predict_result(data.frame(
ABCB5 = 0.9,
AC093642.5 = 0.2,
AF146191.4 = 0.3,
ANO3 = 0.4,
CTD.2231H16.1 = 0.5,
PRKG1 = 50,
RASA3 = 0.1,
VIPR2 = 45
)))
# 生成文档和 NAMESPACE
devtools::document()
# 本地安装
devtools::install()
library(MSSB_Predictive_model_package)
print(predict_result(data.frame(
ABCB5 = 0.9,
AC093642.5 = 0.2,
AF146191.4 = 0.3,
ANO3 = 0.4,
CTD.2231H16.1 = 0.5,
PRKG1 = 50,
RASA3 = 0.1,
VIPR2 = 45
)))
getwd()
devtools::build()
# 生成文档和 NAMESPACE
devtools::document()
# 本地安装
devtools::install()
library(MSSB_Predictive_model_package)
print(predict_result(data.frame(
ABCB5 = 0.9,
AC093642.5 = 0.2,
AF146191.4 = 0.3,
ANO3 = 0.4,
CTD.2231H16.1 = 0.5,
PRKG1 = 50,
RASA3 = 0.1,
VIPR2 = 45
)))
getwd()
devtools::build()
# 生成文档和 NAMESPACE
devtools::document()
# 本地安装
devtools::install()
library(MSSB_Predictive_model_package)
print(predict_result(data.frame(
ABCB5 = 0.9,
AC093642.5 = 0.2,
AF146191.4 = 0.3,
ANO3 = 0.4,
CTD.2231H16.1 = 0.5,
PRKG1 = 50,
RASA3 = 0.1,
VIPR2 = 45
)))
getwd()
devtools::build()
getwd()
# 生成文档和 NAMESPACE
devtools::document()
# 本地安装
devtools::install()
library(MSSB.Predictive.model.package)
# 生成文档和 NAMESPACE
devtools::document()
# 生成文档和 NAMESPACE
devtools::document()
getwd()
# 生成文档和 NAMESPACE
devtools::document()
#save(knn_model_train, file = "knn_model_train.rda")
# 如果有 means, sds:
getwd()
setwd("~/Desktop/r包")
library(devtools)
create("MSSBPredictivemodel")
#save(knn_model_train, file = "knn_model_train.rda")
# 如果有 means, sds:
getwd()
library(devtools)
create("MSSBPredictivemodel")
#save(knn_model_train, file = "knn_model_train.rda")
# 如果有 means, sds:
getwd()
setwd("~/Desktop/r包/MSSBPredictiveModel")
#save(knn_model_train, file = "knn_model_train.rda")
# 如果有 means, sds:
getwd()
# 生成文档和 NAMESPACE
devtools::document()
library(devtools)
create("MSSBPredictivemodel")
setwd("~/Desktop/r_package")
library(devtools)
create("MSSBPredictivemodel")
load("~/Desktop/r包/MSSBPredictiveModel/data/best_k_auc.rda")
load("~/Desktop/r包/MSSBPredictiveModel/data/means.rda")
load("~/Desktop/r包/MSSBPredictiveModel/data/sds.rda")
load("~/Desktop/r包/MSSBPredictiveModel/data/traindata_scaled.rda")
setwd("~/Desktop/r_package/MSSBPredictivemodel")
# 首先设定当前工作目录是你的包根目录，比如 setwd(".../MyKNNPackage")
# 然后：
usethis::use_data(traindata_scaled, best_k_auc, means, sds,
internal = FALSE, overwrite = TRUE)
# 生成文档和 NAMESPACE
devtools::document()
getwd()
# 本地安装
devtools::install()
# 本地安装
devtools::install()
library(MSSBPredictivemodel)
print(predict_result(data.frame(
ABCB5 = 0.9,
AC093642.5 = 0.2,
AF146191.4 = 0.3,
ANO3 = 0.4,
CTD.2231H16.1 = 0.5,
PRKG1 = 50,
RASA3 = 0.1,
VIPR2 = 45
)))
getwd()
# 生成文档和 NAMESPACE
devtools::document()
getwd()
# 本地安装
devtools::install()
library(MSSBPredictivemodel)
print(predict_result(data.frame(
ABCB5 = 0.9,
AC093642.5 = 0.2,
AF146191.4 = 0.3,
ANO3 = 0.4,
CTD.2231H16.1 = 0.5,
PRKG1 = 50,
RASA3 = 0.1,
VIPR2 = 45
)))
getwd()
devtools::build()
